blueprint:
  name: Climate Control - Multi-Zone Auto Heat/Cool (LED-Safe)
  description: >
    Automatically controls multiple climate devices by switching to 'cool' or 'heat' mode based on the current temperature.
    Avoids resending commands unnecessarily to prevent Midea AC LED from turning on.
  domain: automation
  input:
    climate_entities:
      name: Climate Devices
      description: Select one or more climate devices (e.g., AC units).
      selector:
        target:
          entity:
            domain: climate
    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    min_temperature:
      name: Minimum Temperature
      default: 20
      selector:
        number:
          min: 10
          max: 30
          unit_of_measurement: °C
    max_temperature:
      name: Maximum Temperature
      default: 25
      selector:
        number:
          min: 15
          max: 35
          unit_of_measurement: °C
    target_temperature:
      name: Target Temperature
      default: 22
      selector:
        number:
          min: 10
          max: 35
          unit_of_measurement: °C

trigger:
  - platform: state
    entity_id: !input temperature_sensor
  - platform: time_pattern
    minutes: "/5"

condition: []

action:
  - variables:
      sensor_entity: !input temperature_sensor
      current_temp: "{{ states(sensor_entity) | float(0) }}"
      min_temp: !input min_temperature
      max_temp: !input max_temperature
      target_temp: !input target_temperature
      climate_ids: "{{ expand(!input climate_entities) | map(attribute='entity_id') | list }}"

  - repeat:
      for_each: "{{ climate_ids }}"
      sequence:
        - variables:
            entity: "{{ repeat.item }}"
            current_mode: "{{ state_attr(entity, 'hvac_mode') }}"
            current_fan: "{{ state_attr(entity, 'fan_mode') }}"
            current_setpoint: "{{ state_attr(entity, 'temperature') | float(0) }}"

        - choose:
            - conditions: "{{ current_temp < min_temp and current_mode != 'heat' }}"
              sequence:
                - service: climate.set_hvac_mode
                  data:
                    hvac_mode: heat
                  target:
                    entity_id: "{{ entity }}"
            - conditions: "{{ current_temp > max_temp and current_mode != 'cool' }}"
              sequence:
                - service: climate.set_hvac_mode
                  data:
                    hvac_mode: cool
                  target:
                    entity_id: "{{ entity }}"
            - conditions: "{{ current_temp >= min_temp and current_temp <= max_temp and current_mode != 'off' }}"
              sequence:
                - service: climate.turn_off
                  target:
                    entity_id: "{{ entity }}"

        - choose:
            - conditions: "{{ current_temp < min_temp or current_temp > max_temp }}"
              sequence:
                - choose:
                    - conditions: "{{ current_setpoint != target_temp }}"
                      sequence:
                        - service: climate.set_temperature
                          data:
                            temperature: "{{ target_temp }}"
                          target:
                            entity_id: "{{ entity }}"

                - choose:
                    - conditions: "{{ current_fan != 'low' }}"
                      sequence:
                        - service: climate.set_fan_mode
                          data:
                            fan_mode: "low"
                          target:
                            entity_id: "{{ entity }}"

mode: single
